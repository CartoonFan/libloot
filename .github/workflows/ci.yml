name: CI

on:
  push:
    # Don't run this workflow when a tag is pushed.
    branches:
      - '*'
  pull_request:

env:
  BOOST_VERSION: 1.87.0
  CARGO_TERM_COLOR: always
  MSVC_CONFIG: RelWithDebInfo

jobs:
  linux:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get descriptive libloot version
        id: get-libloot-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          LIBLOOT_DESC_REF=${GIT_DESCRIBE}_${GITHUB_REF#refs/*/}
          LIBLOOT_SAFE_DESC_REF=${LIBLOOT_DESC_REF//[\/<>\"|]/_}
          echo "version=$LIBLOOT_SAFE_DESC_REF" >> $GITHUB_OUTPUT

      - name: Download Boost
        id: get-boost
        run: |
          BOOST_BASENAME=boost_${BOOST_VERSION//./_}
          wget https://archives.boost.io/release/${BOOST_VERSION}/source/${BOOST_BASENAME}.tar.gz
          tar -xf ${BOOST_BASENAME}.tar.gz

          echo "root=${BOOST_BASENAME}" >> $GITHUB_OUTPUT

      - name: Install APT package dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-upgrade \
            cbindgen \
            doxygen \
            language-pack-el \
            language-pack-tr \
            libtbb-dev \
            libicu-dev

      - name: Run CMake
        run: |
          cmake \
            -DBOOST_ROOT="${{ steps.get-boost.outputs.root }}" \
            -DCPACK_PACKAGE_VERSION="${{ steps.get-libloot-version.outputs.version }}" \
            -B build
          cmake --build build

      - name: Run tests
        run: ctest --test-dir build --output-on-failure

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install packages for building docs
        shell: bash
        run: |
          pip3 install --user -r docs/requirements.txt
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build docs
        run: sphinx-build -b html docs build/docs/html

      - name: Build archive
        id: build-archive
        shell: bash
        run: |
          cd build
          cpack

          VERSION="${{ steps.get-libloot-version.outputs.version }}"
          echo "filename=libloot-${VERSION}-Linux.tar.xz" >> $GITHUB_OUTPUT

      - name: Import GPG key
        run: echo -n "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import
        if: github.event_name == 'push'

      - name: Sign archive
        run: gpg --output "build/package/${{ steps.build-archive.outputs.filename }}.sig" --detach-sig "build/package/${{ steps.build-archive.outputs.filename }}"
        if: github.event_name == 'push'

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-archive.outputs.filename }}
          path: |
            build/package/${{ steps.build-archive.outputs.filename }}
            build/package/${{ steps.build-archive.outputs.filename }}.sig
        if: github.event_name == 'push'

  windows:
    runs-on: windows-2019

    strategy:
      matrix:
        platform: [Win32, x64]

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust i686-pc-windows-msvc target
        run: rustup target add i686-pc-windows-msvc

      - name: Download Boost
        id: get-boost
        run: |
          $BOOST_BASENAME="boost_" + $env:BOOST_VERSION -replace "\.", "_"
          curl -sSfLO "https://archives.boost.io/release/${env:BOOST_VERSION}/source/${BOOST_BASENAME}.7z"
          7z x "${BOOST_BASENAME}.7z"

          echo "root=$BOOST_BASENAME" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

      - name: Get descriptive libloot version
        id: get-libloot-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          LIBLOOT_DESC_REF=${GIT_DESCRIBE}_${GITHUB_REF#refs/*/}
          LIBLOOT_SAFE_DESC_REF=${LIBLOOT_DESC_REF//[\/<>\"|]/_}
          echo "version=$LIBLOOT_SAFE_DESC_REF" >> $GITHUB_OUTPUT

      - name: Run CMake
        run: |
          cmake -G "Visual Studio 16 2019" `
            -A ${{ matrix.platform }} `
            -DBOOST_ROOT="${{ steps.get-boost.outputs.root }}" `
            -DCPACK_PACKAGE_VERSION="${{ steps.get-libloot-version.outputs.version }}" `
            -B build
          cmake --build build --config ${{ env.MSVC_CONFIG }}

      - name: Run tests
        run: ctest --test-dir build --build-config ${{ env.MSVC_CONFIG }} --output-on-failure

      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install packages for building docs
        run: |
          nuget install doxygen -Version 1.8.14
          echo "${{ github.workspace }}\Doxygen.1.8.14\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          python -m pip install -r docs/requirements.txt

      - name: Build docs
        run: sphinx-build -b html docs build\docs\html

      - name: Build archive
        id: build-archive
        shell: bash
        run: |
          cd build
          cpack -C ${{ env.MSVC_CONFIG }}

          VERSION="${{ steps.get-libloot-version.outputs.version }}"
          if [[ "${{ matrix.platform }}" == "Win32" ]]
          then
            PLATFORM=win32
          else
            PLATFORM=win64
          fi

          echo "filename=libloot-${VERSION}-${PLATFORM}.7z" >> $GITHUB_OUTPUT

      - name: Import GPG key
        run: echo -n "${{ secrets.GPG_SIGNING_KEY }}" | gpg --import
        if: github.event_name == 'push'

      - name: Sign archive
        run: gpg --output "build/package/${{ steps.build-archive.outputs.filename }}.sig" --detach-sig "build/package/${{ steps.build-archive.outputs.filename }}"
        if: github.event_name == 'push'

      - name: Upload archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build-archive.outputs.filename }}
          path: |
            build/package/${{ steps.build-archive.outputs.filename }}
            build/package/${{ steps.build-archive.outputs.filename }}.sig
        if: github.event_name == 'push'
