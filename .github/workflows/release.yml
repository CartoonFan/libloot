name: Release

on:
  push:
    tags: '*'

env:
  CARGO_TERM_COLOR: always
  MSVC_CONFIG: RelWithDebInfo

jobs:
  create_release:
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      git_tag: ${{ steps.get-git-tag.outputs.name }}

    steps:
      - name: Get Git tag
        id: get-git-tag
        run: echo "::set-output name=name::${GITHUB_REF#refs/*/}"

      - id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get-git-tag.outputs.name }}
          release_name: libloot v${{ steps.get-git-tag.outputs.name }}
          body: |
            Requires Windows 7 or later, the MSVC 2019 [x86](https://aka.ms/vs/16/release/vc_redist.x86.exe) or [x64](https://aka.ms/vs/16/release/vc_redist.x64.exe) redistributable for 32-bit and 64-bit builds respectively, and [7-Zip](http://www.7-zip.org/) to extract the archives.

            ## Change Logs
            - [API](https://loot-api.readthedocs.io/en/latest/api/changelog.html)
            - [Metadata Syntax](https://loot-api.readthedocs.io/en/latest/metadata/changelog.html)

            *Note: The files below with `tar.xz` extensions contain Linux binaries. They won't work on Windows computers.*


  linux:
    runs-on: ubuntu-20.04
    needs: create_release

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Get descriptive libloot version
        id: get-libloot-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          LIBLOOT_DESC_REF=${GIT_DESCRIBE}_${GITHUB_REF#refs/*/}
          LIBLOOT_SAFE_DESC_REF=${LIBLOOT_DESC_REF//[\/<>\"|]/_}
          echo "::set-output name=version::$LIBLOOT_SAFE_DESC_REF"

      - name: Download Boost
        run: |
          wget https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.tar.gz
          tar -xf boost_1_78_0.tar.gz

      - name: Install APT package dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-upgrade \
            doxygen \
            language-pack-el \
            language-pack-tr \
            libicu-dev \
            g++-8

      - name: Run CMake
        run: |
          mkdir build
          cd build
          export CXX="g++-8" CC="gcc-8"
          cmake .. -DBOOST_ROOT="boost_1_78_0" -DCPACK_PACKAGE_VERSION="${{ steps.get-libloot-version.outputs.version }}"
          make all

      - name: Run tests
        run: |
          cd build
          ./libloot_internals_tests
          ./libloot_tests

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install packages for building docs
        shell: bash
        run: |
          pip3 install --user -r docs/requirements.txt
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Build docs
        run: sphinx-build -b html docs build/docs/html

      - name: Build archive
        id: build-archive
        shell: bash
        run: |
          cd build
          cpack

          VERSION="${{ steps.get-libloot-version.outputs.version }}"
          echo "::set-output name=filename::libloot-${VERSION}-Linux.tar.xz"

      - name: Upload Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build/package/${{ steps.build-archive.outputs.filename }}
          asset_name: ${{ steps.build-archive.outputs.filename }}
          asset_content_type: application/octet-stream

  windows:
    runs-on: windows-2019
    needs: create_release

    strategy:
      matrix:
        platform: [Win32, x64]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Cache cargo
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust i686-pc-windows-msvc target
        run: rustup target add i686-pc-windows-msvc

      - name: Download Boost
        run: |
          curl -sSfLO https://boostorg.jfrog.io/artifactory/main/release/1.78.0/source/boost_1_78_0.7z
          7z x boost_1_78_0.7z

      - name: Get descriptive libloot version
        id: get-libloot-version
        shell: bash
        run: |
          GIT_DESCRIBE=$(git describe --tags --long --abbrev=7)
          LIBLOOT_DESC_REF=${GIT_DESCRIBE}_${GITHUB_REF#refs/*/}
          LIBLOOT_SAFE_DESC_REF=${LIBLOOT_DESC_REF//[\/<>\"|]/_}
          echo "::set-output name=version::$LIBLOOT_SAFE_DESC_REF"

      - name: Run CMake
        run: |
          mkdir build
          cd build
          cmake .. -G "Visual Studio 16 2019" -A ${{ matrix.platform }} -DBOOST_ROOT="boost_1_78_0" -DCPACK_PACKAGE_VERSION="${{ steps.get-libloot-version.outputs.version }}"
          cmake --build . --config ${{ env.MSVC_CONFIG }}

      - uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install packages for building docs
        run: |
          nuget install doxygen -Version 1.8.14
          echo "${{ github.workspace }}\Doxygen.1.8.14\tools" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          python -m pip install -r docs/requirements.txt

      - name: Build docs
        run: sphinx-build -b html docs build\docs\html

      - name: Build archive
        id: build-archive
        shell: bash
        run: |
          cd build
          cpack -C ${{ env.MSVC_CONFIG }}

          VERSION="${{ steps.get-libloot-version.outputs.version }}"
          if [[ "${{ matrix.platform }}" == "Win32" ]]
          then
            PLATFORM=win32
          else
            PLATFORM=win64
          fi

          echo "::set-output name=filename::libloot-${VERSION}-${PLATFORM}.7z"

      - name: Upload Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: build/package/${{ steps.build-archive.outputs.filename }}
          asset_name: ${{ steps.build-archive.outputs.filename }}
          asset_content_type: application/x-7z-compressed
